AOP(Aspect Oriented Programming) 용어정리
- 조인포인트 : 클라이언트, 사용자, 유저가 사용하는 모든 비즈니스 메서드 CRUD
			포인트컷의 대상 == 포인트컷 후보
			
- 포인트컷  : 선택된 조인포인트 
		   ex) 게시글등록 | 게시글수정, 게시글삭제, 게시글보기 == 작성자 
		                트랜잭션 (횡단관심) CUD | R
	: 비즈니스 메서드는 많기 떄문에 , 횡단관심이 필요한 메서드를 특정하기 위해 필요함 
- 어드바이스(Advice) 
	:  공통 코드를 작성한 클래스, 메서드 
	(주로 클래스 내부의 메서드 형태로 등록됨)
	그 메서드가 언제 동작하는지가  AOP 결합핵심 
	=>.xml설정파일에서 명세함/ 스프링컨테이너가 결합관리 
	=> 5가지 동작시점을 정의할수 있음 (after/after-returning/after-throwing/around/before)
-  Weaving
	: 포인트컷이 호출될때 어드바이스가 삽입되는 과정 
	 사용자에 의해서 핵심관심이 호출될때 어드바이스(동작시점)이 캐치되어 실행됨
	 위빙처리방식 : 컴파일타임, 런타임, .. 
	 => 런타임시에 수행되는 것으로 고정!
- aspect == Advisor
  	: 포인트컷과 어드바이스 의 결합 == aspect
  	
★ 총정리 ★ 
다양한 조인포인트로 구성된 app
이중, 포인트컷을 이용하면 어드바이스 클래스 내부의 횡단 관심 메서드가 수행
==> 포인트컷과 어드바이스를 결합하는 과정 ==> 위빙처리중 
== aspect에 설정된 동작시점에 따라 위빙처리됨 

aop네임스페이스 추가 --> config를 루트로 해서 


applicationContext.xml
<aop:config>
1. 어떤 비즈니스 메서드(==핵심관심==핵심로직==CRUD)
      2.어떤 횡단관심(==부가적인 코드==ex.로깅,트랜잭션,보안,인증...)
      을 추가해야하는지
      설정하는 구역ㄴ
</aop:config>

	<aop:config>
		// pointcut == 비즈니스메서드 == 핵심로직 
		<aop:pointcut expression="execution(* model.board.*Impl.*(..))" id="aPointcut"/> <--핵심 관심
		// <aop:pointcut expression="execution(리턴타입 패키지명.클래스명.메서드명(매개변수))" id="aPointcut"/> 
							ㄴ 포인트컷 표현식					 				 (..) <-- 어떤 인자여도 몇개여도 상관없다
		// advisor = 외부에서 누군가 잘 만들어놓은 부가적인 코드를 데려올떄 사용 / 이유: 내부에 어떤 멤버변수가 있는지 모르니까 (캡슐화) 
		<aop:advisor advice-ref=""/>
					 advice-ref="여기에 뭐가 들어가야하는 지 알려줌"
		// aspect = 내가 만든 로깅 / 내가 만들었으니 안에 있는 멤버변수나 메서드를 알고있음! 
		<aop:aspect ref="log"></aop:aspect>
					ref="무어라 부를지 설정"
			-------------------------------  비즈니스메서드 전후 언제 실행되어야하는지 설정하는 부분 		
			<aop:after method="" pointcut-ref=""/>
			<aop:after-returning method="" pointcut-ref=""/>
			<aop:after-throwing method="" pointcut-ref=""/>
			<aop:around method="" pointcut-ref=""/>
			<aop:before method="" pointcut-ref=""/>
			-------------------------------
			<aop:declare-parents types-matching="" implement-interface=""/>
			<aop:pointcut expression="" id=""/>
		</aop:aspect>			
					
	</aop:config>
	