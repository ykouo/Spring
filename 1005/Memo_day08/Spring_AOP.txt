Spring AOP
=> 개발할때 제일 중요한 가치 :유지보수 

개발에서 가장 중요한 두가지 원칙
	① 낮은 결합도 : IoC를 지원하는
	② 높은 응집도 : AOP를 지원하는 

[AOP]
	Aspect Oriented Programming
	관점==기능 	  지향		프로그래밍

[비즈니스 메서드 구현시] 
	로깅 -> 부가적인 코드
	핵심로직(== 핵심관심(Core Concerns)), CRUD
	예외처리,트랜잭션, 보안 -> 부가적인 코드
부가적인 코드 == (실무에서는 횡단관심(Crosscutting Concerns)) : 재사용성 높음
	지금처럼 작성하면, 결합도를 높이고/ 유지보수 불리 
	"관점분리"(Separation of Concerns)하면, 결합도 낮춤/유지보수 유리 

메서드마다 공통적으로 등장하는 로깅, 예외처리, 트랜잭션, 보안 인증 --> 횡단관심이라고 한다. ex) JDBC

	